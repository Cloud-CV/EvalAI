# Generated by Django 2.2.20 on 2022-10-31 21:07

import base.utils
import challenges.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('hosts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=100)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('submission_guidelines', models.TextField(blank=True, null=True)),
                ('evaluation_details', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=base.utils.RandomFileName('logos'), verbose_name='Logo')),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Start Date (UTC)')),
                ('end_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='End Date (UTC)')),
                ('published', models.BooleanField(db_index=True, default=False, verbose_name='Publicly Available')),
                ('submission_time_limit', models.PositiveIntegerField(default=86400)),
                ('is_registration_open', models.BooleanField(default=True)),
                ('enable_forum', models.BooleanField(default=True)),
                ('forum_url', models.URLField(blank=True, max_length=100, null=True)),
                ('leaderboard_description', models.TextField(blank=True, null=True)),
                ('anonymous_leaderboard', models.BooleanField(default=False)),
                ('is_disabled', models.BooleanField(db_index=True, default=False)),
                ('evaluation_script', models.FileField(default=False, upload_to=base.utils.RandomFileName('evaluation_scripts'))),
                ('approved_by_admin', models.BooleanField(db_index=True, default=False, verbose_name='Approved By Admin')),
                ('featured', models.BooleanField(db_index=True, default=False, verbose_name='Featured')),
                ('allowed_email_domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), blank=True, default=list, size=None)),
                ('blocked_email_domains', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), blank=True, default=list, size=None)),
                ('banned_email_ids', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('remote_evaluation', models.BooleanField(db_index=True, default=False, verbose_name='Remote Evaluation')),
                ('queue', models.CharField(db_index=True, default='', max_length=200, verbose_name='SQS queue name')),
                ('is_docker_based', models.BooleanField(db_index=True, default=False, verbose_name='Is Docker Based')),
                ('is_static_dataset_code_upload', models.BooleanField(db_index=True, default=False, verbose_name='Is Static Dataset Code Upload Based')),
                ('slug', models.SlugField(max_length=200, null=True, unique=True)),
                ('max_docker_image_size', models.BigIntegerField(blank=True, default=42949672960, null=True)),
                ('max_concurrent_submission_evaluation', models.PositiveIntegerField(default=100000)),
                ('aws_account_id', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('aws_access_key_id', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('aws_secret_access_key', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('aws_region', models.CharField(blank=True, default='us-east-1', max_length=50, null=True)),
                ('use_host_credentials', models.BooleanField(default=False)),
                ('cli_version', models.CharField(blank=True, max_length=20, null=True, verbose_name='evalai-cli version')),
                ('workers', models.IntegerField(blank=True, default=None, null=True)),
                ('task_def_arn', models.CharField(blank=True, default='', max_length=2048, null=True)),
                ('slack_webhook_url', models.URLField(blank=True, null=True)),
                ('github_repository', models.CharField(blank=True, default='', max_length=1000, null=True)),
                ('worker_cpu_cores', models.IntegerField(blank=True, default=512, null=True)),
                ('worker_memory', models.IntegerField(blank=True, default=1024, null=True)),
                ('inform_hosts', models.BooleanField(default=True)),
                ('vpc_cidr', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('subnet_1_cidr', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('subnet_2_cidr', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('worker_instance_type', models.CharField(blank=True, default='g4dn.xlarge', max_length=256, null=True)),
                ('worker_ami_type', models.CharField(blank=True, default='AL2_x86_64_GPU', max_length=256, null=True)),
                ('worker_disk_size', models.IntegerField(blank=True, default=100, null=True)),
                ('max_worker_instance', models.IntegerField(blank=True, default=10, null=True)),
                ('min_worker_instance', models.IntegerField(blank=True, default=1, null=True)),
                ('desired_worker_instance', models.IntegerField(blank=True, default=1, null=True)),
                ('cpu_only_jobs', models.BooleanField(default=False)),
                ('job_cpu_cores', models.CharField(blank=True, default='2000m', max_length=256, null=True)),
                ('job_memory', models.CharField(blank=True, default='8Gi', max_length=256, null=True)),
            ],
            options={
                'db_table': 'challenge',
            },
        ),
        migrations.CreateModel(
            name='ChallengeConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('zip_configuration', models.FileField(upload_to=base.utils.RandomFileName('zip_configuration_files/challenge_zip'))),
                ('is_created', models.BooleanField(db_index=True, default=False)),
                ('stdout_file', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('zip_configuration_files/challenge_zip'))),
                ('stderr_file', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('zip_configuration_files/challenge_zip'))),
                ('code_upload_environment_log_file', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('zip_configuration_files/challenge_zip'))),
            ],
            options={
                'db_table': 'challenge_zip_configuration',
            },
        ),
        migrations.CreateModel(
            name='ChallengeEvaluationCluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('cluster_endpoint', models.URLField(blank=True, null=True)),
                ('cluster_ssl', models.TextField(blank=True, null=True)),
                ('cluster_yaml', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('cluster_yaml'))),
                ('kube_config', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('kube_config'))),
                ('eks_arn_role', models.CharField(blank=True, max_length=512, null=True)),
                ('node_group_arn_role', models.CharField(blank=True, max_length=512, null=True)),
                ('ecr_all_access_policy_arn', models.CharField(blank=True, max_length=512, null=True)),
                ('vpc_id', models.CharField(blank=True, max_length=512, null=True)),
                ('subnet_1_id', models.CharField(blank=True, max_length=512, null=True)),
                ('subnet_2_id', models.CharField(blank=True, max_length=512, null=True)),
                ('security_group_id', models.CharField(blank=True, max_length=512, null=True)),
                ('internet_gateway_id', models.CharField(blank=True, max_length=512, null=True)),
                ('route_table_id', models.CharField(blank=True, max_length=512, null=True)),
                ('efs_security_group_id', models.CharField(blank=True, max_length=512, null=True)),
                ('efs_id', models.CharField(blank=True, max_length=512, null=True)),
                ('efs_creation_token', models.CharField(blank=True, max_length=256, null=True)),
                ('efs_mount_target_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=256), blank=True, default=list, size=None)),
            ],
            options={
                'db_table': 'challenge_evaluation_cluster',
            },
        ),
        migrations.CreateModel(
            name='ChallengePhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField()),
                ('leaderboard_public', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='Start Date (UTC)')),
                ('end_date', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='End Date (UTC)')),
                ('is_public', models.BooleanField(default=False)),
                ('is_submission_public', models.BooleanField(default=False)),
                ('annotations_uploaded_using_cli', models.BooleanField(default=False)),
                ('test_annotation', models.FileField(blank=True, null=True, upload_to=base.utils.RandomFileName('test_annotations'))),
                ('max_submissions_per_day', models.PositiveIntegerField(db_index=True, default=100000)),
                ('max_submissions_per_month', models.PositiveIntegerField(db_index=True, default=100000)),
                ('max_submissions', models.PositiveIntegerField(db_index=True, default=100000)),
                ('max_concurrent_submissions_allowed', models.PositiveIntegerField(default=3)),
                ('codename', models.CharField(default='Phase Code Name', max_length=100)),
                ('allowed_email_ids', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), blank=True, default=list, null=True, size=None)),
                ('slug', models.SlugField(max_length=200, null=True, unique=True)),
                ('environment_image', models.CharField(blank=True, max_length=2128, null=True)),
                ('allowed_submission_file_types', models.CharField(default='.json, .zip, .txt, .tsv, .gz, .csv, .h5, .npy', max_length=200)),
                ('is_restricted_to_select_one_submission', models.BooleanField(default=False)),
                ('submission_meta_attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('is_partial_submission_evaluation_enabled', models.BooleanField(default=False)),
                ('config_id', models.IntegerField(blank=True, default=None, null=True)),
                ('default_submission_meta_attributes', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'challenge_phase',
            },
        ),
        migrations.CreateModel(
            name='ChallengePhaseSplit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('visibility', models.PositiveSmallIntegerField(choices=[(1, 'host'), (2, 'owner and host'), (3, 'public')], default=3)),
                ('leaderboard_decimal_precision', models.PositiveIntegerField(default=2)),
                ('is_leaderboard_order_descending', models.BooleanField(default=True)),
                ('show_leaderboard_by_latest_submission', models.BooleanField(default=False)),
                ('show_execution_time', models.BooleanField(default=False)),
                ('is_multi_metric_leaderboard', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'challenge_phase_split',
            },
        ),
        migrations.CreateModel(
            name='ChallengeTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=500)),
                ('template_file', models.FileField(upload_to=base.utils.RandomFileName('templates'))),
                ('is_active', models.BooleanField(db_index=True, default=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to=base.utils.RandomFileName('templates/preview-images/'), verbose_name='Template Preview Image')),
                ('dataset', models.CharField(default='', max_length=200)),
                ('eval_metrics', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=200), blank=True, default=challenges.models.get_default_eval_metric, size=None)),
                ('phases', models.IntegerField(blank=True, default=None, null=True)),
                ('splits', models.IntegerField(blank=True, default=None, null=True)),
                ('slug', models.CharField(default='', max_length=500)),
            ],
            options={
                'db_table': 'challenge_templates',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='DatasetSplit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('codename', models.CharField(max_length=100)),
                ('config_id', models.IntegerField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'dataset_split',
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField()),
                ('config_id', models.IntegerField(blank=True, default=None, null=True)),
            ],
            options={
                'db_table': 'leaderboard',
            },
        ),
        migrations.CreateModel(
            name='UserInvitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=200)),
                ('invitation_key', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('accepted', 'accepted'), ('pending', 'pending')], db_index=True, max_length=30)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge', to='challenges.Challenge')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hosts.ChallengeHost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invite_user_to_challenge',
            },
        ),
        migrations.CreateModel(
            name='StarChallenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('is_starred', models.BooleanField(db_index=True, default=False)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'starred_challenge',
            },
        ),
        migrations.CreateModel(
            name='PWCChallengeLeaderboard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('area', models.CharField(db_index=True, default='', max_length=200)),
                ('task', models.CharField(db_index=True, default='', max_length=200)),
                ('dataset', models.CharField(db_index=True, default='', max_length=200)),
                ('enable_sync', models.BooleanField(db_index=True, default=True, verbose_name='Enable leaderboard sync to PWC')),
                ('phase_split', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='challenges.ChallengePhaseSplit')),
            ],
            options={
                'db_table': 'pwc_challenge_leaderboard',
            },
        ),
        migrations.CreateModel(
            name='LeaderboardData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('result', django.contrib.postgres.fields.jsonb.JSONField()),
                ('error', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('challenge_phase_split', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.ChallengePhaseSplit')),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenges.Leaderboard')),
            ],
            options={
                'db_table': 'leaderboard_data',
            },
        ),
    ]
