# Generated by Django 2.2.20 on 2025-07-09 15:00

from django.db import migrations, models


def populate_github_branch_default(apps, schema_editor):
    """
    Populate existing challenges with empty github_branch fields to use "challenge" as default.
    """
    Challenge = apps.get_model("challenges", "Challenge")
    # Update all challenges that have github_repository but empty github_branch
    Challenge.objects.filter(github_repository__isnull=False).exclude(
        github_repository=""
    ).filter(github_branch__isnull=True).update(github_branch="challenge")

    # Also update challenges with empty string github_branch
    Challenge.objects.filter(github_repository__isnull=False).exclude(
        github_repository=""
    ).filter(github_branch="").update(github_branch="challenge")


def reverse_populate_github_branch_default(apps, schema_editor):
    """
    Reverse migration - set github_branch back to empty string for challenges that were set to "challenge".
    """
    Challenge = apps.get_model("challenges", "Challenge")
    # Only reverse if the field was set to "challenge" by this migration
    Challenge.objects.filter(github_repository__isnull=False).exclude(
        github_repository=""
    ).filter(github_branch="challenge").update(github_branch="")
    
def fix_duplicate_github_fields(apps, schema_editor):
    """
    No data migration needed since we're using a partial unique constraint.
    """
    pass


def reverse_fix_duplicate_github_fields(apps, schema_editor):
    """
    No reverse migration needed.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("challenges", "0112_challenge_sqs_retention_period"),
    ]

    operations = [
        migrations.AddField(
            model_name="challenge",
            name="github_branch",
            field=models.CharField(
                blank=True, default="challenge", max_length=200, null=True
            ),
        ),
        # Data migration to populate existing records
        migrations.RunPython(
            populate_github_branch_default,
            reverse_populate_github_branch_default,
        ),
        migrations.RunPython(
            fix_duplicate_github_fields,
            reverse_fix_duplicate_github_fields,
        ),
        # Add a partial unique constraint that only applies when both fields are not empty
        migrations.RunSQL(
            "CREATE UNIQUE INDEX challenge_github_repo_branch_partial_idx ON challenge (github_repository, github_branch) WHERE github_repository != '' AND github_branch != '';",
            reverse_sql="DROP INDEX IF EXISTS challenge_github_repo_branch_partial_idx;",
        ),
    ]
