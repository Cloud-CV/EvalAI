language: python
sudo: required
os: linux
dist: focal
services:
  - docker
  - xvfb

python:
  - '3.9.21'

# Enhanced caching strategy
cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/.cache/docker
    - $HOME/.npm
    - $HOME/.bower
    - node_modules
    - bower_components

env:
  global:
    - COMPOSE_BAKE=true
    - COMPOSE_BAKE_ARGS="--build-arg PIP_NO_CACHE_DIR=1"
    - DOCKER_BUILDKIT=1
    - COMPOSE_DOCKER_CLI_BUILD=1

before_install:
  - sudo rm -f /etc/boto.cfg
  - export CHROME_BIN=chromium-browser
  - export DISPLAY=:99.0
  - pip install --upgrade pip
  - mkdir -p $HOME/.config/pip
  - echo "[build_ext]" > $HOME/.config/pip/pip.conf
  - echo "parallel = 4" >> $HOME/.config/pip/pip.conf  # Increased parallelism
  - ulimit -u 16384
  - ulimit -n 4096
  # Enable Docker BuildKit for faster builds (safe write)
  - sudo mkdir -p /etc/docker
  - sudo tee /etc/docker/daemon.json >/dev/null <<'JSON'
    {"features": {"buildkit": true}}
    JSON
  - sudo service docker restart || true

install:
  - pip install awscli==1.18.66

jobs:
  fast_finish: true
  include:
    # Stage 1: Build Docker images in parallel
    - stage: Build
      name: Build Core Services
      script:
        - if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || travis_terminate 1; fi
        - docker-compose build django db sqs || travis_terminate 1;

    - stage: Build
      name: Build Frontend
      script:
        - docker-compose build nodejs || travis_terminate 1;

    - stage: Build
      name: Build Worker (Python 3.7)
      script:
        - docker-compose --profile worker_py3_7 build worker_py3_7 || travis_terminate 1;

    - stage: Build
      name: Build Worker (Python 3.8)
      script:
        - docker-compose --profile worker_py3_8 build worker_py3_8 || travis_terminate 1;

    - stage: Build
      name: Build Worker (Python 3.9)
      script:
        - docker-compose --profile worker_py3_9 build worker_py3_9 || travis_terminate 1;

    # Stage 2: Run tests in parallel
    - stage: Test
      name: Frontend Tests
      script:
        - docker-compose run --rm nodejs bash -c "gulp dev && karma start --single-run && gulp staging" || travis_terminate 1;

        # Backend Tests
        - docker-compose run -e DJANGO_SETTINGS_MODULE=settings.test django python manage.py flush --noinput || travis_terminate 1;
        - docker-compose run -e DJANGO_SETTINGS_MODULE=settings.test django pytest --cov . --cov-config .coveragerc --cov-report=xml:coverage-backend.xml || travis_terminate 1;

    # Stage 3: Code quality checks in parallel
    - stage: Code Quality
      name: Black & isort
      script:
        - docker-compose run --rm -e DJANGO_SETTINGS_MODULE=settings.dev django bash -c "
          pip install black==24.8.0 isort==5.12.0 &&
          echo 'Running black check...' &&
          black --check --diff ./ &&
          echo 'Running isort check...' &&
          isort --check-only --diff --profile=black ./ &&
          echo 'Black and isort checks passed!'" || travis_terminate 1;

    - stage: Code Quality
      name: Flake8
      script:
        - docker-compose run --rm -e DJANGO_SETTINGS_MODULE=settings.dev django bash -c "
          pip install flake8==3.8.2 &&
          echo 'Running flake8 check...' &&
          flake8 --config=.flake8 ./ &&
          echo 'Flake8 check passed!'" || travis_terminate 1;

    - stage: Code Quality
      name: Pylint
      script:
        - docker-compose run --rm -e DJANGO_SETTINGS_MODULE=settings.dev django bash -c "
          pip install pylint==3.3.6 &&
          echo 'Running pylint check...' &&
          pylint --rcfile=.pylintrc --output-format=colorized --score=y --fail-under=7.5 ./ &&
          echo 'Pylint check passed!'" || travis_terminate 1;

    # Stage 4: Coverage reporting
    - stage: Coverage
      name: Coverage Report
      script:
        - echo "Coverage reporting handled by backend tests"
      after_success:
        # Upload backend coverage to Codecov
        - bash <(curl -s https://codecov.io/bash) -f coverage-backend.xml -F backend
        
        # Upload frontend coverage to Codecov
        - bash <(curl -s https://codecov.io/bash) -f coverage/frontend/lcov.info -F frontend

    - stage: Package & Deployment
      name: Push & Deploy Services
      script:
        - eval "$(ssh-agent -s)"
        - openssl aes-256-cbc -K $encrypted_77d2d82026f6_key -iv $encrypted_77d2d82026f6_iv -in scripts/deployment/evalai.pem.enc -out scripts/deployment/evalai.pem -d || true
        - ./scripts/deployment/push.sh || travis_terminate 1;
        - ./scripts/deployment/deploy.sh auto_deploy || travis_terminate 1;

before_cache:
  - rm -f $HOME/.cache/pip/log/debug.log

notifications:
  email:
    on_success: change
    on_failure: always
  slack: cloudcv:gy3CGQGNXLwXOqVyzXGZfdea